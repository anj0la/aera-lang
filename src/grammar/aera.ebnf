program = { declaration } EOF ;

declaration = function_declaration
            | variable_declaration
            | const_declaration
            | struct_declaration 
            | class_declaration
            | trait_declaration
            | with_delaration ;

function_declaration = [modifiers] "fn" identifier "(" [parameter_list] ")" ["->", type], block ;
parameter_list = parameter { "," parameter } ;
parameter = identifier ":" type ;
modifiers = "pub" | "modifies" ;

variable_declaration = "let" ["mut"] identifier [":" type] ["=" expression ";"] ;
const_declaration = "const" identifier [":" type] "=" expression ";" ;

struct_declaration = "struct" identifier "{" { field_declaration } "}" ;
field_declaration = identifier ":" type [ "=" expression ] ";" ;

class_declaration = "class" identifier [":" identifier] "{" { class_body } "}" ;
class_body = { class_member } ;
class_member = field_declaration | function_declaration ;

trait_declaration = "trait" identifier "{" { function_declaration } "}" ;
with_declaration = "with" identifier "for" identifier "{" { function_declaration } "}" ;

expression = assignment ;

assignment = expression assignment_op assignment | conditional ;
assignment_op = "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "<<=" | ">>=" | "&=" | "|=" | "^=" | "~=" ;

conditional = logical_or ["if" expression "else" else conditional] ;
logical_or = logical_and { "||" logical_and } ;
logical_and = bitwise_or { "&&" bitwise_or } ;
bitwise_or = bitwise_xor { "|" bitwise_xor } ;
bitwise_xor = bitwise_and { "^" bitwise_and } ;
bitwise_and = equality { "&" equality } ;
equality = comparison { ("==" | "!="), comparison } ;
comparison = shift { (">" | ">=" | "<" | "<=") shift } ;
shift = term { (">>" | "<<") term } ;
term = factor { ("+" | "-") factor } ;
factor = unary { ("*" | "/" | "%") unary } ;

unary = ("!" | "-"| "~" | "&" ) unary | cast ;
cast = postfix ["as" type] ; 
postfix = primary { ("[" expression "]" | "." identifier | "(" [argument_list] ")"  | "?" ) } ;
primary = literal | identifier | "(" expression ")"  ;

argument_list = expression { ","  expression } ;

statement = variable_declaration
            | const_declaration
            | expression_statement
            | return_statement
            | if_statement
            | while_statement
            | for_statement
            | loop_statement
            | block ;

expression_statement = expression ";" ;
return_statement = "return" [expression] ";" ;
if_statement = "if" expression statement ["else" statement] ";" ;
while_statement = "while" expression statement ";" ;
for_statement = "for" identifier "in" expr [".." expr] statement ";" ; 
loop_statement = "loop" statement ";" ;
block = "{" { statement } "}" ";" ;

integer_literal = decimal_integer
                | hexadecimal_integer
                | binary_integer
                | octal_integer ;

decimal_integer = digit { digit } ;
hexadecimal_integer = "0" ("x" | "X") hex_digit { hex_digit } ;
binary_integer = "0" ("b" | "B") binary_digit { binary_digit } ;
octal_integer = "0" ("o" | "O") octal_digit { octal_digit } ;
float_literal = decimal_integer "." decimal_integer [ scientific_notation ]
              | decimal_integer scientific_notation ;
scientific_notation = ("e" | "E") [ "+" | "-" ] decimal_integer ;
float_literal = integer_literal "." integer_literal ;
character_literal = "'" character  "'" ;
string_literal = """ { character } """ ;
boolean_literal = "true" | "false" ;

character = printable | escape_sequence ;
printable = alpha | digit | symbol | space ;
alpha = "a" ... "z" | "A" ... "Z" ;
digit = "0" ... "9";
hex_digit = digit | 
digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
hex_digit = digit | "a" ... "f" | "A" ... "F" ;
binary_digit = "0" | "1" ;
octal_digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" ;
symbol = "!" ... "/" | ":" ... "@" | "[" ... "`" | "{" ... "~" ;
underscore = "_" ;
escape_sequence = "\\" ( "n" | "t" | "r" | "\"" | "'" | "\\" ) ;
space = " " ;

identifier = (alpha  | "_" ) { (alpha | digit | "_" ) } ;
type = primitive_type 
     | user_type 
     | generic_type 
     | array_type ; 

primitive_type =  "int8" | "int16" | "int32" | "int64" | "uint8" | "uint16" | "uint32" | "uint64" | "float32" | "float64" | "char" | "string" | "bool" ; user_type = identifier ; 
generic_type = identifier "!<" type_list ">" ; 
array_type = primitive_type array_dimensions | user_type array_dimensions | generic_type array_dimensions ;
array_dimensions = ( "[" [ integer_literal ] "]" ) { ( "[" [ integer_literal ] "]" ) } ;

type_list = type { "," type } ;