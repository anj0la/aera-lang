program = { declaration } EOF ;

declaration = function_declaration
            | variable_declaration
            | const_declaration
            | struct_declaration 
            | class_declaration
            | interface_declaration ;

function_declaration = ["pub"] "fn" identifier "(" [parameter_list] ")" [ "->", type], block ;
parameter_list = parameter { "," parameter } ;
parameter = identifier ":" type ;


struct_declaration = "struct" identifier "{" { field_declaration } "}" ;
field_declaration = identifier ":" type [ "=" expression ] ";" ;

class_declaration = "class" identifier [ ":" identifier ] "{" { class_body } "}" ;
class_body = { class_member } ;
class_member = field_declaration | function_declaration ;

interface_declaration = "interface" identifier "{" { function_declaration } "}" ;

expression = assignment ;

assignment = conditional [ assignment_op assignment ] ;
assignment_op = "+=" | "-=" | "*=" | "/=" | "%=" | "<<=" | ">>=" | "&=" | "|=" | "^=" | "~=" | ;

conditional = logical_or [ "if" expression "else" else conditional ] ;
logical_or = logical_and { "||" logical_and } ;
logical_and = bitwise_or { "&&" bitwise_or } ;
bitwise_or = bitwise_xor { "|" bitwise_xor } ;
bitwise_xor = bitwise_and { "^" bitwise_and } ;
bitwise_and = equality { "&" equality } ;
equality = comparison { ("==" | "!="), comparison } ;
comparison = shift { (">" | ">=" | "<" | "<=") shift } ;
shift = term { (">>" | "<<") term } ;
term = factor { ("+" | "-") factor } ;
factor = unary { ("*" | "/" | "%") unary } ;

unary = ("!" | "-"| "~" | "&" ) unary | postfix ;
postfix = primary { ("[" expression "]" | "." identifier | "(" [argument_list] ")"  | "?" ) } ;
primary = literal | identifier | "(" expression ")" | unsafe ;

argument_list = expression { ","  expression } ;
unsafe = "unsafe" "{" statement [expression]  "}" ";" ;


statement = variable_declaration
            | const_declaration
            | expression_statement
            | return_statement
            | if_statement
            | while_statement
            | for_statement
            | loop_statement
            | block ;

variable_declaration = "let" ["mut"] identifier [":" type] [ "=" expression ] ";" ;
const_declaration = "const" identifier [":" type] [ "=" expression ] ";" ;
expression_statement = expression ";" ;
return statement = "return" [expression] ";" ;
if_statement = "if" expression statement ["else" statement] ";" ;
while_statement = "while" expression statement ";" ;
for_statement = "for" identifier "in" integer_literal ".." integer_literal statement ";" ; 
loop_statement = "loop" statement ";" ;
block = "{" { statement } "}" ";" ;

literal = integer_literal
          | float_literal
          | character_literal
          | string_literal
          | boolean_literal ;

integer_literal = digit { digit } { integer_suffix } ;
integer_suffix = "i8" | "i16" | "i32" | "i64" | "u8" | "u16" | "u32" | "u64" ;
float_literal = integer_literal "." integer_literal { float_suffix } ;
float_suffix = "f32" | "f64" ;
character_literal = "'" character  "'" ";" ;
string_literal = """ { character } """ ";" ;
boolean_literal = "true" | "false" ;

character = printable | escape_sequence ;
printable = alpha | digit | symbol | space ;
alpha = "a" ... "z" | "A" ... "Z" ;
digit = "0" ... "9";
symbol = "!" ... "/" | ":" ... "@" | "[" ... "`" | "{". .. "~" ;
underscore = "_" ;
escape_sequence = "\\" ( "n" | "t" | "r" | "\"" | "'" | "\\" ) ;
space = " " ;

identifier = (alpha  | "_" ) { (alpha | digit | "_" ) } ;
type = identifier ;